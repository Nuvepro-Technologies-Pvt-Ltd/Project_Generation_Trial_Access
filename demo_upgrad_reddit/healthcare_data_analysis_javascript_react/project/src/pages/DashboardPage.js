// pages/DashboardPage.js
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Spinner, Alert, Button, OverlayTrigger, Tooltip } from 'react-bootstrap';
import EntityHighlights from '../components/EntityHighlights';
import SummaryStatistics from '../components/SummaryStatistics';
import SyntheticDataTable from '../components/SyntheticDataTable';
import SyntheticDataControls from '../components/SyntheticDataControls';
import AIResultsFilterExport from '../components/AIResultsFilterExport';
import { fetchAIResults, fetchSyntheticData, generateSyntheticData } from '../services/api';
import { serializeAndDownload } from '../utils/exportUtils';

/**
 * Dashboard Page: Now includes filters (by patient attr, data type, dates)
 * and export controls for AI results & synthetic data.
 */
function DashboardPage() {
  // Dashboard state: AI analysis, synthetic data, loading/error toggling, controls feedback
  const [aiResults, setAiResults] = useState(null);
  const [syntheticData, setSyntheticData] = useState([]);
  const [loadingDash, setLoadingDash] = useState(false);
  const [errorDash, setErrorDash] = useState('');

  // For generation controls
  const [loadingGen, setLoadingGen] = useState(false);
  const [errorGen, setErrorGen] = useState('');

  // For filter UI state: display filtered subset (separate from backend call)
  const [dashboardFilters, setDashboardFilters] = useState({}); // optionally needed for further use

  // For highlighting/reload
  const [reloadTs, setReloadTs] = useState(Date.now());

  // Load dashboard info (AI stats + synthetic data list)
  useEffect(() => {
    setLoadingDash(true);
    setErrorDash('');
    Promise.all([fetchAIResults(), fetchSyntheticData()])
      .then(([aiRes, synthData]) => {
        setAiResults(aiRes);
        setSyntheticData(synthData);
        setLoadingDash(false);
      })
      .catch(() => {
        setErrorDash('Failed to load dashboard data. Please try again.');
        setLoadingDash(false);
      });
  }, [reloadTs]);

  // Handler for manual dashboard full reload
  const handleRefresh = () => setReloadTs(Date.now());

  // Handler for synthetic data generation (triggers reload to show batch)
  const handleGenerateSynthetic = async (params) => {
    setLoadingGen(true);
    setErrorGen('');
    try {
      await generateSyntheticData(params);
      setReloadTs(Date.now());
    } catch (e) {
      setErrorGen(
        e?.response?.data?.error ||
        e?.message ||
        'Failed to generate synthetic data â check parameters and try again.'
      );
    } finally {
      setLoadingGen(false);
    }
  };

  // Handler for client-side export
  const handleExport = (type, data, format, fileName) => {
    if (!data || !data.length) return;
    serializeAndDownload(data, fileName, format);
  };

  // Tooltips for info icons
  const analysisTooltip = (
    <Tooltip>
      AI performs NLP and entity recognition to extract insights from healthcare data.
    </Tooltip>
  );
  const statsTooltip = (
    <Tooltip>
      Summarized stats such as counts, averages, or frequencies extracted by the AI model.
    </Tooltip>
  );
  const syntheticTooltip = (
    <Tooltip>
      Example synthetic healthcare data generated by the AI for research/test use.
    </Tooltip>
  );

  return (
    <Container fluid className="bg-light min-vh-100 p-3">
      <Row className="mb-3 align-items-center">
        <Col>
          <h2 className="text-primary">AI-Driven Healthcare Data Dashboard</h2>
        </Col>
        <Col xs="auto">
          {/* Manual data reload */}
          <Button variant="outline-primary" onClick={handleRefresh}>Refresh Data</Button>
        </Col>
      </Row>
      {loadingDash && (
        <Row>
          <Col>
            <div className="text-center p-5">
              <Spinner animation="border" role="status" />
              <div>Loading dashboard data...</div>
            </div>
          </Col>
        </Row>
      )}
      {errorDash && (
        <Row>
          <Col>
            <Alert variant="danger">{errorDash}</Alert>
          </Col>
        </Row>
      )}
      {!loadingDash && !errorDash && (
        <>
          {/* Filter and Export Controls for all analytical tables */}
          <Card className="mb-2 border-info">
            <Card.Header className="bg-info bg-opacity-10">Filter, Summarize, and Export Results</Card.Header>
            <Card.Body>
              <AIResultsFilterExport
                aiResults={aiResults}
                syntheticData={syntheticData}
                onExport={handleExport}
              />
            </Card.Body>
          </Card>

          <Row className="mb-3">
            <Col md={6}>
              <Card className="mb-3">
                <Card.Header className="d-flex align-items-center">
                  Entity Recognition Highlights
                  <OverlayTrigger placement="right" overlay={analysisTooltip}>
                    <span className="ml-2" style={{cursor: 'pointer'}}><i className="bi bi-info-circle-fill text-secondary"></i></span>
                  </OverlayTrigger>
                </Card.Header>
                <Card.Body>
                  {/* List medical entities recognized by the AI */}
                  <EntityHighlights highlights={aiResults?.entityHighlights || []} />
                </Card.Body>
              </Card>
            </Col>
            <Col md={6}>
              <Card className="mb-3">
                <Card.Header className="d-flex align-items-center">
                  Summary Statistics
                  <OverlayTrigger placement="right" overlay={statsTooltip}>
                    <span className="ml-2" style={{cursor: 'pointer'}}><i className="bi bi-info-circle-fill text-secondary"></i></span>
                  </OverlayTrigger>
                </Card.Header>
                <Card.Body>
                  {/* Show summary statistics */}
                  <SummaryStatistics stats={aiResults?.summaryStats} />
                </Card.Body>
              </Card>
            </Col>
          </Row>
          <Row>
            <Col>
              <Card className="mb-2 border-success">
                <Card.Header className="d-flex align-items-center bg-success bg-opacity-10">
                  Generate New Synthetic Data
                  <OverlayTrigger placement="right" overlay={syntheticTooltip}>
                    <span className="ml-2" style={{cursor: 'pointer'}}><i className="bi bi-info-circle-fill text-success"></i></span>
                  </OverlayTrigger>
                </Card.Header>
                <Card.Body>
                  {/* User controls to request synthetic data from backend */}
                  <SyntheticDataControls
                    onGenerate={handleGenerateSynthetic}
                    loading={loadingGen}
                    error={errorGen}
                  />
                </Card.Body>
              </Card>
              <Card>
                <Card.Header className="d-flex align-items-center">
                  Generated Synthetic Data
                  <OverlayTrigger placement="right" overlay={syntheticTooltip}>
                    <span className="ml-2" style={{cursor: 'pointer'}}><i className="bi bi-info-circle-fill text-secondary"></i></span>
                  </OverlayTrigger>
                </Card.Header>
                <Card.Body>
                  {/* Table of synthetic data rows, visually distinguished as synthetic */}
                  <SyntheticDataTable data={syntheticData} />
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </>
      )}
    </Container>
  );
}

export default DashboardPage;
